[tool]

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
  "pragma: no cover"
]
fail_under = 100
include_namespace_packages = true
omit = [
  "contributor_setup.py"
]
show_missing = true
skip_empty = true

[tool.coverage.run]
branch = true
cover_pylib = false
source = ["actions", "scripts"]

[tool.docformatter]
close-quotes-on-newline = true
in-place = true
recursive = true
wrap-descriptions = 100
wrap-summaries = 0

[tool.poetry]
package-mode = false
version = "1.2.0"

[tool.poetry.dependencies]
python = "~3.12"  # This needs to stay in sync with all CI workflows

[tool.poetry.group.actions-create_unique_testpypi_version.dependencies]
poetry-core = "1.9.0"
pypi-simple = "1.5.0"
tomli = "2.0.1"
tomli-w = "1.0.0"

[tool.poetry.group.actions-find_unreleased_changelog_items.dependencies]

[tool.poetry.group.actions-update_development_dependencies.dependencies]
poetry-plugin-export = "1.7.1"
pre-commit = "3.8.0"
pypi-simple = "1.5.0"
toml-sort = "0.23.1"
yamlfix = "1.17.0"

[tool.poetry.group.dev.dependencies]
pip = "^24.0"
poetry-audit-plugin = "^0.4.0"
poetry-plugin-export = "1.7.1"
poetry-pre-commit-plugin = "^0.1.2"
pre-commit = "3.8.0"
pyright = "1.1.379"
tox = "^4.18.0"
tox-gh-actions = "^3.2.0"

[tool.poetry.group.docs.dependencies]
codespell = "^1.17.1"
mkdocs = "^1.6.0"
mkdocs-ezglossary-plugin = "^1.6.10"
mkdocs-macros-plugin = "^1.0.5"
mkdocs-mermaid2-plugin = "^1.1.1"
mkdocs-same-dir = "^0.1.3"
mkdocs-spellcheck = "^1.1.0"
pygments = "^2.17.2"
pymdown-extensions = "^10.8.1"
symspellpy = "^6.7.7"
tomli = "2.0.1"

[tool.poetry.group.tests.dependencies]
coverage = "^7.5.0"
linkchecker = "^10.0.0"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
pytest-depends = "^1.0.1"
pytest-env = "^1.1.3"
pytest-github-report = "^0.0.1"
pytest-html = "^4.1.1"
pytest-order = "^1.2.1"

[tool.pyright]
ignore = [
  "temp_*.py"
]
pythonPlatform = "All"
reportCallInDefaultInitializer = "error"
reportImplicitOverride = "error"
reportImplicitStringConcatenation = "none"  # this is allowed
reportImportCycles = "error"
reportMissingModuleSource = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "none"  # this can safely be ignored
strict = ["**"]
typeCheckingMode = "strict"
useLibraryCodeForTypes = true

[tool.pytest.ini_options]
addopts = "--cov-config=pyproject.toml"
filterwarnings = [
]
junit_family = "xunit2"
junit_logging = "all"
markers = [
  'docs',
  'order'
]
pythonpath = "."
xfail_strict = true

[tool.pytest_env]
pytest_report_title = {skip_if_set = true, value = "Test Results"}

[tool.ruff]
line-length = 100
output-format = "concise"
src = ["."]

[tool.ruff.lint]
allowed-confusables = ["¸", "×"]
fixable = ["ALL"]
flake8-pytest-style = {mark-parentheses = false}
flake8-quotes = {docstring-quotes = "double"}
ignore = [
  "COM812",  # Trailing comma missing (handled by the formatter)
  "FIX002",  # Line contains TO DO, consider resolving the issue
  "INP001",  # File is part of an implicit namespace package. Add an `__init__.py`.
  "ISC001",  # single-line-implicit-string-concatenation (handled by formatter)
  "T201",  # `print` found
  "TD002",  # Missing author in TO DO
  "TD003"  # TD003 Missing issue link on the line following this TO DO
]
pydocstyle = {convention = "google"}
pylint = {max-args = 7}
# https://beta.ruff.rs/docs/rules/
select = [
  "ALL"
]
task-tags = ["FIXME", "FUTURE", "RELIC", "TODO"]

[tool.ruff.lint.isort]
force-sort-within-sections = false
known-first-party = []
lines-between-types = 1
order-by-type = false

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "PLR2004",  # Magic value used in comparison
  "S101"  # Use of assert detected
]

[tool.semantic_release]
build_command = """
  python -m scripts.bump_version_in_files
"""
version_toml = [
  "pyproject.toml:tool.poetry.version"
]

[tool.semantic_release.changelog]
exclude_commit_patterns = []
template_dir = "python_semantic_release_templates"

[tool.semantic_release.changelog.environment]
extensions = []

[tool.semantic_release.commit_parser_options]
# These settings allow python-semantic-release to be used without triggering on any commits
allowed_tags = []
minor_tags = []
patch_tags = []

[tool.tomlsort]
all = true
in_place = true
spaces_before_inline_comment = 2
overrides."tool.poetry.*".inline_arrays = false

[tool.tox]
legacy_tox_ini = """
[tox]
requires = tox>4
no_package = True
envlist = py312,tests,docs,doctests
skip_missing_interpreters = False

[gh-actions]
python =
    3.12: py312

[testenv]
install_command = python -I -m pip install --upgrade --upgrade-strategy=eager {opts} {packages}
deps =
    poetry
setenv =
    # Skip pre-commit checks that are not needed
    SKIP = file-contents-sorter
commands_pre =
    poetry install
commands =
    !tests: pre-commit run --all-files
    pytest -vv -k "not test_docs" --showlocals --cov --junitxml={tox_root}/.results_{envname}/results.xml --cov-report=term --cov-report=xml:{tox_root}/.coverage_{envname}.xml --cov-report=html:{tox_root}/.results_{envname}/html --self-contained-html --html={tox_root}/.results_{envname}/results.html

[testenv:tests]
basepython = python
passenv =
    pytest_report_title
setenv =
    pytest_github_report = true
    pytest_use_blanks = true
    GITHUB_STEP_SUMMARY = {tox_root}/.results_{envname}/github_report.md

[testenv:docs]
commands_pre =
    poetry install --only docs
commands =
    python -c "import shutil; shutil.rmtree('.results_{envname}', ignore_errors=True)"
    mkdocs --verbose build --site-dir .results_{envname}

[testenv:doctests]
commands =
    pytest -v -k "test_docs" --showlocals --junitxml={tox_root}/.results_{envname}/results.xml --self-contained-html --html={tox_root}/.results_{envname}/results.html
"""

[tool.yamlfix]
comments_min_spaces_from_content = 1
