---
name: Publish to GitHub & PyPI
on:
  workflow_call:
    inputs:
      package-name:
        description: The name of the package to release.
        required: true
        type: string
      repo-name:
        description: The full name of the repository to use to gate uploads, in the
          format `owner/repo`.
        required: true
        type: string
      commit-user-name:
        description: The name of the user to use when committing changes to the repository.
        required: true
        type: string
      commit-user-email:
        description: The email of the user to use when committing changes to the repository.
        required: true
        type: string
      release-level:
        description: |
          Select the release level:
          patch for backward compatible minor changes and bug fixes,
          minor for backward compatible larger changes,
          major for non-backward compatible changes.
        required: true
        type: string
      build-and-publish-python-package:
        description: A boolean value that determines whether to build and publish
          the Python package. If set to `false`, the package binaries will not be
          built or published to PyPI, TestPyPI, or GitHub Releases.
        required: false
        default: true
        type: boolean
      python-versions-array:
        description: A valid JSON array of Python versions to validate the installation
          with. If `build-and-publish-python-package` is set to `true`, this input
          must be provided or the build will fail.
        required: false
        type: string
      operating-systems-array:
        description: A valid JSON array of operating system names to validate the
          installation on.
        required: false
        default: '["ubuntu", "windows", "macos"]'
        type: string
      previous-changelog-filepath:
        description: The full path of the file to copy the contents of the changelog
          into for use in the `python-semantic-release` templates.
        required: false
        type: string
        default: .previous_changelog_for_template.md
      previous-release-notes-filepath:
        description: The full path of the file to copy the contents of the `## Unreleased`
          section of the changelog into for use in the GitHub Release Notes.
        required: false
        type: string
        default: .previous_release_notes_for_template.md
    secrets:
      checkout-token:
        description: The token to use for checking out the repository, must have permissions
          to write back to the repository.
        required: true
      ssh-signing-key-private:
        description: A private SSH key associated with the account that owns the `checkout-token`
          that will be used to sign the commit and tag created by `python-semantic-release`.
        required: true
      ssh-signing-key-public:
        description: The public SSH key linked to the `secrets.ssh-signing-key-private`
          key that will be used to sign the commit and tag created by `python-semantic-release`.
        required: true
      pypi-api-token:
        description: The API token for the package on pypi.org. If `build-and-publish-python-package`
          is set to `true`, this input must be provided or the build will fail.
        required: false
      test-pypi-api-token:
        description: The API token for the package on test.pypi.org. If `build-and-publish-python-package`
          is set to `true`, this input must be provided or the build will fail.
        required: false
concurrency:
  group: pypi (Reusable Workflows)
env:
  PACKAGE_NAME: ${{ inputs.package-name }}
jobs:
  # Print the inputs to the summary page for easy User Review
  print-inputs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: python-versions-array input missing
        if: ${{ inputs.build-and-publish-python-package == true && (inputs.python-versions-array == null || inputs.python-versions-array == '') }}
        run: |
          echo "The python-versions-array input is required when the build-and-publish-python-package input is set to true."
          exit 1
      - if: ${{ endsWith(github.repository, '/python-package-ci-cd') }}  # Run the local action when this is run in the python-package-ci-cd repository
        uses: ./actions/find_unreleased_changelog_items
        with:
          release-level: ${{ inputs.release-level }}
          previous-changelog-filepath: ${{ inputs.previous-changelog-filepath }}
          previous-release-notes-filepath: ${{ inputs.previous-release-notes-filepath }}
      - if: ${{ !endsWith(github.repository, '/python-package-ci-cd') }}  # Run the public action when this is run outside the python-package-ci-cd repository
        uses: tektronix/python-package-ci-cd/actions/find_unreleased_changelog_items@v1.4.0
        with:
          release-level: ${{ inputs.release-level }}
          previous-changelog-filepath: ${{ inputs.previous-changelog-filepath }}
          previous-release-notes-filepath: ${{ inputs.previous-release-notes-filepath }}
  # Update the package version using the python-semantic-release package (https://github.com/python-semantic-release/python-semantic-release)
  # This job requires a Personal Access Token (Classic) with
  # the public_repo permission. It also needs a private/public
  # ssh key pair that can be used for signing. The public key must
  # be attached to the account as an SSH signing key.
  bump-version:
    name: Update package version
    needs: [print-inputs]
    if: github.repository == inputs.repo-name && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: package-release-gate
    continue-on-error: true
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.checkout-token }}
      - if: ${{ endsWith(github.repository, '/python-package-ci-cd') }}  # Run the local action when this is run in the python-package-ci-cd repository
        uses: ./actions/find_unreleased_changelog_items
        with:
          previous-changelog-filepath: ${{ inputs.previous-changelog-filepath }}
          previous-release-notes-filepath: ${{ inputs.previous-release-notes-filepath }}
      - if: ${{ !endsWith(github.repository, '/python-package-ci-cd') }}  # Run the public action when this is run outside the python-package-ci-cd repository
        uses: tektronix/python-package-ci-cd/actions/find_unreleased_changelog_items@v1.4.0
        with:
          previous-changelog-filepath: ${{ inputs.previous-changelog-filepath }}
          previous-release-notes-filepath: ${{ inputs.previous-release-notes-filepath }}
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@fe6b271e942115b528c85e42bc19611b01dcea59 # v9.8.8
        id: release
        with:
          force: ${{ inputs.release-level }}
          root_options: -v --strict
          github_token: ${{ secrets.checkout-token }}
          git_committer_email: ${{ inputs.commit-user-email }}
          git_committer_name: ${{ inputs.commit-user-name }}
          ssh_public_signing_key: ${{ secrets.ssh-signing-key-public }}
          ssh_private_signing_key: ${{ secrets.ssh-signing-key-private }}
      - name: Mark the release as approved
        id: set-approved
        if: ${{ steps.release.conclusion == 'success' }}
        run: echo "approved=true" >> "$GITHUB_OUTPUT"
    outputs:
      built-version: ${{ steps.release.outputs.version }}
      approved: ${{ steps.set-approved.outputs.approved }}
  # Build the newly updated package
  pypi-build:
    name: Build package
    needs: [print-inputs, bump-version]
    if: inputs.build-and-publish-python-package && github.repository == inputs.repo-name
      && github.ref == 'refs/heads/main' && needs.bump-version.outputs.approved ==
      'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          ref: main  # Make sure to check out the latest commit on main, not the original commit that triggered the workflow
          fetch-depth: 0
      - name: Build package
        uses: hynek/build-and-inspect-python-package@73aea398b9c8de9ea9e4464c6b13cb8b1f3d6294 # v2.9.0
        with:
          attest-build-provenance-github: 'true'
  # Upload the official package version to TestPyPI
  upload-testpypi:
    name: Upload package to TestPyPI
    needs: [print-inputs, bump-version, pypi-build]
    if: inputs.build-and-publish-python-package && github.repository == inputs.repo-name
      && github.ref == 'refs/heads/main' && needs.bump-version.outputs.approved ==
      'true'
    runs-on: ubuntu-latest
    environment: package-testpypi
    permissions:
      id-token: write
    steps:
      - name: Download built packages
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          name: Packages
          path: dist
      - name: Upload package to Test PyPI
        uses: pypa/gh-action-pypi-publish@ec4db0b4ddc65acdf4bff5fa45ac92d78b56bdf0  # v1.9.0
        with:
          password: ${{ secrets.test-pypi-api-token }}
          repository-url: https://test.pypi.org/legacy/
  # Upload the official package version to PyPI
  upload-pypi:
    name: Upload package to PyPI
    needs: [print-inputs, bump-version, upload-testpypi]
    if: inputs.build-and-publish-python-package && github.repository == inputs.repo-name
      && github.ref == 'refs/heads/main' && needs.bump-version.outputs.approved ==
      'true'
    runs-on: ubuntu-latest
    environment: package-release
    permissions:
      id-token: write
    steps:
      - name: Download built packages
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          name: Packages
          path: dist
      - name: Upload package to PyPI
        uses: pypa/gh-action-pypi-publish@ec4db0b4ddc65acdf4bff5fa45ac92d78b56bdf0  # v1.9.0
        with:
          password: ${{ secrets.pypi-api-token }}
  # Upload the official package binaries to the GitHub Release
  upload-github:
    name: Upload package to GitHub Release
    needs: [print-inputs, bump-version, upload-pypi]
    if: inputs.build-and-publish-python-package && github.repository == inputs.repo-name
      && github.ref == 'refs/heads/main' && needs.bump-version.outputs.approved ==
      'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          ref: main  # Make sure to check out the latest commit on main, not the original commit that triggered the workflow
          fetch-depth: 0
      - name: Download built packages
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          name: Packages
          path: dist
      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/upload-to-gh-release@fa2bbbf8e61069551abd513fdc5627e14c8637c7 # v9.8.8
        with:
          root_options: -v --strict
          github_token: ${{ secrets.GITHUB_TOKEN }}
  # Verify the package can be installed on all necessary python versions and operating systems from both TestPyPI and PyPI
  pypi-install:
    name: Install package
    needs:
      - print-inputs
      - bump-version
      - pypi-build
      - upload-testpypi
      - upload-pypi
      - upload-github
    if: inputs.build-and-publish-python-package && github.repository == inputs.repo-name
      && github.ref == 'refs/heads/main' && needs.bump-version.outputs.approved ==
      'true'
    runs-on: ${{ matrix.os-name }}-latest
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        os-name: ${{ fromJSON(inputs.operating-systems-array) }}
        python-version: ${{ fromJSON(inputs.python-versions-array) }}
        index_urls:
          - ''
          - ' --index-url=https://test.pypi.org/simple/ --extra-index-url=https://pypi.org/simple'
    steps:
      - name: Set up Python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f  # v5.1.1
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Test installing package
        # A retry is used to allow for some downtime before the package is installable
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # v3.0.0
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 30
          warning_on_retry: false
          command: pip install${{ matrix.index_urls }} "${{ env.PACKAGE_NAME }}==${{
            needs.bump-version.outputs.built-version }}"
